From 7dcb9206c185ef90c59485ffa36f51bcb1794e1d Mon Sep 17 00:00:00 2001
From: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Date: Fri, 21 Apr 2023 20:49:14 +0800
Subject: [PATCH 3/5] ethtool: add support for configuring frame preemption via
 netlink

From https://github.com/nxp-real-time-edge-sw/meta-real-time-edge/blob/mickledore/recipes-extended/ethtool/files/0003-ethtool-add-support-for-configuring-frame-preemption.patch

Adds the same functionality of the ETHTOOL_{G,S}FP commands, now via
the ETHTOOL_MSG_PREEMPT_{GET,SET} netlink messages.

Upstream-Status: Pending

Signed-off-by: Vinicius Costa Gomes <vinicius.gomes@intel.com>
Signed-off-by: Changming Huang <jerry.huang@nxp.com>
Signed-off-by: Xiaoliang Yang <xiaoliang.yang_1@nxp.com>
Signed-off-by: Xiaolei Wang <xiaolei.wang@windriver.com>
---
 Makefile.am            |   1 +
 ethtool.c              |   2 +
 netlink/desc-ethtool.c |  12 +++
 netlink/extapi.h       |   4 +
 netlink/preempt.c      | 165 +++++++++++++++++++++++++++++++++++++++++
 5 files changed, 184 insertions(+)
 create mode 100644 netlink/preempt.c

diff --git a/Makefile.am b/Makefile.am
index 999e769..eca778e 100644
--- a/Makefile.am
+++ b/Makefile.am
@@ -42,6 +42,7 @@ ethtool_SOURCES += \
 		  netlink/desc-ethtool.c netlink/desc-genlctrl.c \
 		  netlink/module-eeprom.c netlink/module.c netlink/rss.c \
 		  netlink/desc-rtnl.c netlink/cable_test.c netlink/tunnels.c \
+		  netlink/preempt.c \
 		  uapi/linux/ethtool_netlink.h \
 		  uapi/linux/netlink.h uapi/linux/genetlink.h \
 		  uapi/linux/rtnetlink.h uapi/linux/if_link.h \
diff --git a/ethtool.c b/ethtool.c
index 4a0b2ad..a9f0167 100644
--- a/ethtool.c
+++ b/ethtool.c
@@ -6113,11 +6113,13 @@ static const struct option args[] = {
 	{
 		.opts	= "--show-frame-preemption",
 		.func	= do_get_preempt,
+		.nlfunc	= nl_get_preempt,
 		.help	= "Show Frame Preemption settings",
 	},
 	{
 		.opts	= "--set-frame-preemption",
 		.func	= do_set_preempt,
+		.nlfunc	= nl_set_preempt,
 		.help	= "Set Frame Preemption settings",
 		.xhelp	= "		[ fp on|off ]\n"
 			  "		[ preemptible-queues-mask %x ]\n"
diff --git a/netlink/desc-ethtool.c b/netlink/desc-ethtool.c
index 737196f..68e5591 100644
--- a/netlink/desc-ethtool.c
+++ b/netlink/desc-ethtool.c
@@ -451,6 +451,16 @@ static const struct pretty_nla_desc __rss_desc[] = {
 	NLATTR_DESC_BINARY(ETHTOOL_A_RSS_HKEY),
 };
 
+static const struct pretty_nla_desc __preempt_desc[] = {
+	NLATTR_DESC_INVALID(ETHTOOL_A_PREEMPT_UNSPEC),
+	NLATTR_DESC_NESTED(ETHTOOL_A_PREEMPT_HEADER, header),
+	NLATTR_DESC_U8(ETHTOOL_A_PREEMPT_SUPPORTED),
+	NLATTR_DESC_U8(ETHTOOL_A_PREEMPT_ACTIVE),
+	NLATTR_DESC_U32(ETHTOOL_A_PREEMPT_QUEUES_SUPPORTED),
+	NLATTR_DESC_U32(ETHTOOL_A_PREEMPT_QUEUES_PREEMPTIBLE),
+	NLATTR_DESC_U32(ETHTOOL_A_PREEMPT_MIN_FRAG_SIZE),
+};
+
 const struct pretty_nlmsg_desc ethnl_umsg_desc[] = {
 	NLMSG_DESC_INVALID(ETHTOOL_MSG_USER_NONE),
 	NLMSG_DESC(ETHTOOL_MSG_STRSET_GET, strset),
@@ -484,6 +494,8 @@ const struct pretty_nlmsg_desc ethnl_umsg_desc[] = {
 	NLMSG_DESC(ETHTOOL_MSG_FEC_GET, fec),
 	NLMSG_DESC(ETHTOOL_MSG_FEC_SET, fec),
 	NLMSG_DESC(ETHTOOL_MSG_MODULE_EEPROM_GET, module_eeprom),
+	NLMSG_DESC(ETHTOOL_MSG_PREEMPT_GET, preempt),
+	NLMSG_DESC(ETHTOOL_MSG_PREEMPT_SET, preempt),
 	NLMSG_DESC(ETHTOOL_MSG_STATS_GET, stats),
 	NLMSG_DESC(ETHTOOL_MSG_PHC_VCLOCKS_GET, phc_vclocks),
 	NLMSG_DESC(ETHTOOL_MSG_MODULE_GET, module),
diff --git a/netlink/extapi.h b/netlink/extapi.h
index 9b6dd1a..a2735ab 100644
--- a/netlink/extapi.h
+++ b/netlink/extapi.h
@@ -46,6 +46,8 @@ int nl_gstats(struct cmd_context *ctx);
 int nl_gmodule(struct cmd_context *ctx);
 int nl_smodule(struct cmd_context *ctx);
 int nl_monitor(struct cmd_context *ctx);
+int nl_get_preempt(struct cmd_context *ctx);
+int nl_set_preempt(struct cmd_context *ctx);
 int nl_getmodule(struct cmd_context *ctx);
 int nl_grss(struct cmd_context *ctx);
 
@@ -108,6 +110,8 @@ nl_get_eeprom_page(struct cmd_context *ctx __maybe_unused,
 #define nl_cable_test		NULL
 #define nl_cable_test_tdr	NULL
 #define nl_gtunnels		NULL
+#define nl_get_preempt		NULL
+#define nl_set_preempt		NULL
 #define nl_gfec			NULL
 #define nl_sfec			NULL
 #define nl_gstats_chk		NULL
diff --git a/netlink/preempt.c b/netlink/preempt.c
new file mode 100644
index 0000000..0e4695c
--- /dev/null
+++ b/netlink/preempt.c
@@ -0,0 +1,165 @@
+/*
+ * preempt.c - netlink implementation of frame preemption settings
+ *
+ * Implementation of "ethtool --{show,set}-frame-preemption <dev>"
+ */
+
+#include <errno.h>
+#include <string.h>
+#include <stdio.h>
+#include <linux/rtnetlink.h>
+#include <linux/if_link.h>
+
+#include "../internal.h"
+#include "../common.h"
+#include "netlink.h"
+#include "parser.h"
+
+/* PREEMPT_GET */
+
+static int preempt_get_prep_request(struct nl_socket *nlsk)
+{
+	int ret;
+
+	ret = nlsock_prep_get_request(nlsk, ETHTOOL_MSG_PREEMPT_GET,
+				      ETHTOOL_A_PREEMPT_HEADER, 0);
+	if (ret < 0)
+		return ret;
+
+	return 0;
+}
+
+int preempt_get_reply_cb(const struct nlmsghdr *nlhdr, void *data)
+{
+	const struct nlattr *tb[ETHTOOL_A_PREEMPT_MAX + 1] = {};
+	DECLARE_ATTR_TB_INFO(tb);
+	struct nl_context *nlctx = data;
+	int ret;
+
+	if (nlctx->is_dump || nlctx->is_monitor)
+		nlctx->no_banner = false;
+
+	ret = mnl_attr_parse(nlhdr, GENL_HDRLEN, attr_cb, &tb_info);
+	if (ret < 0)
+		return ret;
+
+	nlctx->devname = get_dev_name(tb[ETHTOOL_A_PREEMPT_HEADER]);
+	if (!dev_ok(nlctx))
+		return MNL_CB_OK;
+
+	printf("Frame preemption settings for %s:\n", nlctx->devname);
+
+	if (tb[ETHTOOL_A_PREEMPT_SUPPORTED]) {
+		int supported = mnl_attr_get_u8(
+			tb[ETHTOOL_A_PREEMPT_SUPPORTED]);
+
+		printf("\tsupport: %s\n",
+		       supported ? "supported" : "not supported");
+	}
+	if (tb[ETHTOOL_A_PREEMPT_ACTIVE]) {
+		int active = mnl_attr_get_u8(tb[ETHTOOL_A_PREEMPT_ACTIVE]);
+
+		printf("\tactive: %s\n", active ? "active" : "not active");
+	}
+	if (tb[ETHTOOL_A_PREEMPT_QUEUES_SUPPORTED]) {
+		uint32_t queues = mnl_attr_get_u32(
+			tb[ETHTOOL_A_PREEMPT_QUEUES_SUPPORTED]);
+
+		printf("\tsupported queues: %#x\n", queues);
+
+	}
+	if (tb[ETHTOOL_A_PREEMPT_QUEUES_PREEMPTIBLE]) {
+		uint32_t queues = mnl_attr_get_u32(
+			tb[ETHTOOL_A_PREEMPT_QUEUES_PREEMPTIBLE]);
+
+		printf("\tpreemptible queues: %#x\n", queues);
+
+	}
+	if (tb[ETHTOOL_A_PREEMPT_MIN_FRAG_SIZE]) {
+		uint32_t min_frag_size = mnl_attr_get_u32(
+			tb[ETHTOOL_A_PREEMPT_MIN_FRAG_SIZE]);
+
+		printf("\tminimum fragment size: %d\n", min_frag_size);
+	}
+	return MNL_CB_OK;
+}
+
+int nl_get_preempt(struct cmd_context *ctx)
+{
+	struct nl_context *nlctx = ctx->nlctx;
+	struct nl_socket *nlsk = nlctx->ethnl_socket;
+	int ret;
+
+	ret = preempt_get_prep_request(nlsk);
+	if (ret < 0)
+		return ret;
+	return nlsock_send_get_request(nlsk, preempt_get_reply_cb);
+}
+
+static const struct lookup_entry_u8 fp_values[] = {
+	{ .arg = "off",		.val = 0 },
+	{ .arg = "on",		.val = 1 },
+	{}
+};
+
+static const struct param_parser set_preempt_params[] = {
+	{
+		.arg		= "fp",
+		.group		= ETHTOOL_MSG_PREEMPT_SET,
+		.type		= ETHTOOL_A_PREEMPT_ACTIVE,
+		.handler	= nl_parse_lookup_u8,
+		.handler_data	= fp_values,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "preemptible-queues-mask",
+		.group		= ETHTOOL_MSG_PREEMPT_SET,
+		.type		= ETHTOOL_A_PREEMPT_QUEUES_PREEMPTIBLE,
+		.handler	= nl_parse_direct_u32,
+		.min_argc	= 1,
+	},
+	{
+		.arg		= "min-frag-size",
+		.group		= ETHTOOL_MSG_PREEMPT_SET,
+		.type		= ETHTOOL_A_PREEMPT_MIN_FRAG_SIZE,
+		.handler	= nl_parse_direct_u32,
+		.min_argc	= 1,
+	},
+	{}
+};
+
+int nl_set_preempt(struct cmd_context *ctx)
+{
+	struct nl_msg_buff *msgbuffs[1] = {};
+	struct nl_context *nlctx = ctx->nlctx;
+	int ret;
+
+	nlctx->cmd = "--set-frame-preemption";
+	nlctx->argp = ctx->argp;
+	nlctx->argc = ctx->argc;
+	nlctx->devname = ctx->devname;
+
+	ret = nl_parser(nlctx, set_preempt_params, NULL, PARSER_GROUP_MSG, msgbuffs);
+	if (ret < 0) {
+		ret = 1;
+		goto out_free;
+	}
+
+	struct nl_socket *nlsk = nlctx->ethnl_socket;
+
+	ret = nlsock_sendmsg(nlsk, msgbuffs[0]);
+	if (ret < 0)
+		goto out_free;
+
+	ret = nlsock_process_reply(nlsk, nomsg_reply_cb, NULL);
+	if (ret < 0)
+		goto out_free;
+
+out_free:
+	msgbuff_done(msgbuffs[0]);
+	free(msgbuffs[0]);
+
+	if (ret >= 0)
+		return ret;
+	return nlctx->exit_code ?: 75;
+}
-- 
2.25.1

